####  Notes
####  1.When launching RDS to connect you must specify 1 IP in RDS Security Groups
####  2.Enable Public accessibility in modify section


Parameters:
  InstanceTypeParameter2:
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
    Description: Default is t2.micro

  PlacementGroupsetup:
    Type: String
    Default: "spread"
    AllowedValues:
      - "spread"
      - "partition"
      - "cluster"
    Description: "Choose placement group"

  DeploymentGroup:
    Type: String
    Default: Dev
    AllowedValues:
      - Dev
      - Prod
      - Test
    Description: set Deployment Group

  DB:
    Type: String
    Default: MySQL
    AllowedValues:
      - MySQL
      - MariaDB
      - postgres
      - Oracle
      - SQL Server
      - Amazon Aurora
    Description: Select Database Type

  PrivateIP:
    Type: String
    Description: private IP for RDS connection

  AllocatedStorages:
    Type: String
    Default: "10"
    AllowedValues:
      - "10"
      - "50"
      - "100"
      - "400"
      - "600"
      - "800"
      - "1000"
    Description: Label Enviroment Tag

  AZ:
    Type: String
    Default: A
    AllowedValues:
      - A
      - B
      - C
    Description: Choose AZ

  InstanceTypeParameter:
    Type: String
    Default: db.t3.micro
    AllowedValues:
      - db.t3.micro
      - db.t3.small
      - db.t3.medium
      - db.t3.large
      - db.t3.xlarge
      - db.t3.2xlarge
      - db.r4.large
      - db.r4.xlarge
      - db.r4.2xlarge
      - db.r4.4xlarge
      - db.r4.8xlarge
      - db.r4.16xlarge
      - db.m4.large
      - db.m4.xlarge
      - db.m4.2xlarge
      - db.m4.4xlarge
      - db.m4.10xlarge
      - db.m4.16xlarge
    Description: Chooses instance type

  VPC:
    Type: AWS::EC2::VPC::Id
    Description: VPC Identifier
    MinLength: 1

  Subnet1:
    Type: AWS::EC2::Subnet::Id
    Description: The Main AZ needed to host the Application [ Choose 2 different subnets ]
    MinLength: 1

  Subnet2:
    Type: AWS::EC2::Subnet::Id
    Description: The Main AZ needed to host the Application [ Choose 2 different subnets ]
    MinLength: 1

  DBUsername:
    Type: String
    Description: Set Username

  DBPass:
    Type: String
    Description: NEEDS TO BE 8 DIGITS LONG

  MultiAZs:
    Type: String
    Default: false
    AllowedValues:
      - false
      - true
    Description: Choose Multi AZ

  PublicDB:
    Type: String
    Default: false
    AllowedValues:
      - false
      - true
    Description: Choose Multi AZ

  DBEncryption:
    Type: String
    Default: false
    AllowedValues:
      - false
      - true
    Description: Choose encryption

  StorageType:
    Type: String
    Default: standard
    AllowedValues:
      - standard
      - gp2
      - io1
    Description: Choose encryption

  ENVTag:
    Type: String
    Default: Dev
    AllowedValues:
      - Dev
      - Prod
      - Test
    Description: Label Enviroment Tag

  VersionTag:
    Type: String
    Default: V1.0
    Description: Label Version Tag

  ProjectTag:
    Type: String
    Description: Label ProjectTag

  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: "select key KeyPair"

Mappings:
  RegionMap:
##--------------------------(N. Virginia)--------------------------
    us-east-1:
      A: us-east-1a
      B: us-east-1b
      C: us-east-1c
      D: us-east-1d
      E: us-east-1e
      F: us-east-1f
##--------------------------(N. California)--------------------------
    us-west-1:
      A: us-west-1a
      B: us-west-1b
      C: us-west-1c
##--------------------------(Oregon)--------------------------
    us-west-2:
      A: us-west-2a
      B: us-west-2b
      C: us-west-2c
      D: us-west-2d
##--------------------------(Ireland)--------------------------
    eu-west-1:
      A: eu-west-1a
      B: eu-west-1b
      C: eu-west-1c
##--------------------------(Tokyo)--------------------------
    ap-northeast-1:
      A: eu-west-1a
      B: eu-west-1b
      C: eu-west-1c
##--------------------------(Singapore)--------------------------
    ap-southeast-1:
      A: ap-southeast-1a
      B: ap-southeast-1b
      C: ap-southeast-1c
##--------------------------(Sydney)--------------------------
    ap-southeast-2:
      A: ap-southeast-2a
      B: ap-southeast-2b
      C: ap-southeast-2c
##--------------------------(SÃ£o Paulo)--------------------------
    sa-east-1:
      A: sa-east-1a
      B: sa-east-1b
      C: sa-east-1c
##--------------------------(Frankfurt)--------------------------
    eu-central-1:
      A: eu-central-1a
      B: eu-central-1b
      C: eu-central-1a
##--------------------------(Hong Kong)--------------------------
    ap-east-1:
      A: ap-east-1a
      B: ap-east-1b
      C: ap-east-1c
##--------------------------(Mumbai)--------------------------
    ap-south-1:
      A: ap-south-1a
      B: ap-south-1b
      C: ap-south-1c
##--------------------------(Seoul)--------------------------
    ap-northeast-2:
      A: ap-northeast-2a
      B: ap-northeast-2b
      C: ap-northeast-2c
##--------------------------(Canada)--------------------------
    ca-central-1:
      A: ca-central-1a
      B: ca-central-1b
      C: ca-central-1a
##--------------------------(London)--------------------------
    eu-west-2:
      A: eu-west-2a
      B: eu-west-2b
      C: eu-west-2c
##--------------------------(Paris)--------------------------
    eu-west-3:
      A: eu-west-3a
      B: eu-west-3b
      C: eu-west-3c
##--------------------------(Stockholm)--------------------------
    eu-north-1:
      A: eu-north-1a
      B: eu-north-1b
      C: eu-north-1c
##--------------------------(Middle East)--------------------------
    me-south-1:
      A: me-south-1a
      B: me-south-1b
      C: me-south-1c
##--------------------------(Ohio)--------------------------
    us-east-2:
      A: us-east-2a
      B: us-east-2b
      C: us-east-2c

Resources:
  RDS:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage:
        Ref: AllocatedStorages
      AllowMajorVersionUpgrade: True
      AutoMinorVersionUpgrade: True
      AvailabilityZone: !FindInMap [RegionMap, !Ref "AWS::Region", !Ref AZ]
      BackupRetentionPeriod: 30
      CopyTagsToSnapshot: True
      DBInstanceClass: !Ref InstanceTypeParameter
      DBInstanceIdentifier:
        Ref: AWS::StackName
      DBName:
        Ref: AWS::StackName
      DeleteAutomatedBackups: True
      DeletionProtection: True
      Engine:
        Ref: DB
      MasterUsername:
        Ref: DBUsername
      MasterUserPassword:
        Ref: DBPass
      MultiAZ:
        Ref: MultiAZs
      PubliclyAccessible:
        Ref: PublicDB
      SourceRegion:
        Ref: AWS::Region
      StorageEncrypted:
        Ref: DBEncryption
      StorageType:
        Ref: StorageType
      DBSubnetGroupName:
        Ref: SubnetGroup
      Port: "3306"
      VPCSecurityGroups:
        - !Ref RDSSG
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
        - Key: ENV
          Value:
            Ref: ENVTag
        - Key: Version
          Value:
            Ref: VersionTag
        - Key: Project
          Value:
            Ref: ProjectTag

  SubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet Group for RDS
      DBSubnetGroupName: !Ref AWS::StackName
      SubnetIds:
        - !Ref Subnet1
        - !Ref Subnet2
      Tags:
        - Key: ENV
          Value:
            Ref: ENVTag
        - Key: Version
          Value:
            Ref: VersionTag
        - Key: Project
          Value:
            Ref: ProjectTag

  RDSSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Basic internet SG for RDS
      GroupName: !Ref AWS::StackName
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 1521
          ToPort: 1521
          CidrIp:
            Ref: PrivateIP
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp:
            Ref: PrivateIP
        - IpProtocol: tcp
          FromPort: 1433
          ToPort: 1433
          CidrIp:
            Ref: PrivateIP
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          CidrIp:
            Ref: PrivateIP
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
        - Key: ENV
          Value:
            Ref: ENVTag
        - Key: Version
          Value:
            Ref: VersionTag
        - Key: Project
          Value:
            Ref: ProjectTag

  WebInstance:
    Type: AWS::EC2::Instance
    Metadata:
        AWS::CloudFormation::Init:
          config:
            files:
              '/etc/profile.d/load_env.sh':
                content: !Sub |
                  export Name=${AWS::StackName}

    Properties:
        InstanceType:
          Ref: InstanceTypeParameter2
        ImageId: ami-830c94e3
        SecurityGroupIds:
          - Ref: InstanceSecurityGroup
        SubnetId:
          Ref: Subnet1
        KeyName:
          Ref: KeyName
        UserData:
          Fn::Base64: !Sub |
              !/bin/bash -xe
              sudo apt-get update
              sudo apt install docker.io
              sudo systemctl start docker
              sudo systemctl enable docker
              docker --version

        Tags:
          - Key: Name
            Value: !Ref AWS::StackName
          - Key: DeploymentGroup
            Value:
              Ref: DeploymentGroup
          - Key: ENV
            Value:
              Ref: ENVTag
          - Key: Version
            Value:
              Ref: VersionTag
          - Key: Project
            Value:
              Ref: ProjectTag

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
        GroupDescription: Allow HTTP/HTTPS to ALB
        VpcId:
           Ref: VPC
        SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        Tags:
          - Key: Name
            Value: !Ref AWS::StackName
          - Key: DeploymentGroup
            Value:
              Ref: DeploymentGroup
          - Key: ENV
            Value:
              Ref: ENVTag
          - Key: Version
            Value:
              Ref: VersionTag
          - Key: Project
            Value:
              Ref: ProjectTag

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckEnabled: True
      HealthCheckIntervalSeconds: 100
      HealthCheckPort: 443
      HealthCheckProtocol: HTTPS
      HealthCheckTimeoutSeconds: 90
      HealthyThresholdCount: 3
      Name: !Ref AWS::StackName
      Port: 443
      Protocol: HTTPS
      Targets:
        - Id:
            Ref: WebInstance
          Port: 443
      TargetType: instance
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
        - Key: DeploymentGroup
          Value:
            Ref: DeploymentGroup
        - Key: ENV
          Value:
            Ref: ENVTag
        - Key: Version
          Value:
            Ref: VersionTag
        - Key: Project
          Value:
            Ref: ProjectTag

  Loadbalencer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      Name: !Ref AWS::StackName
      Scheme: internet-facing
      SecurityGroups:
        - Ref: InstanceSecurityGroup
      Subnets:
        - Ref: Subnet1
        - Ref: Subnet2
      Type: application
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
        - Key: DeploymentGroup
          Value:
            Ref: DeploymentGroup
        - Key: ENV
          Value:
            Ref: ENVTag
        - Key: Version
          Value:
            Ref: VersionTag
        - Key: Project
          Value:
            Ref: ProjectTag

  PlacementGroup:
    Type: AWS::EC2::PlacementGroup
    Properties:
      Strategy:
        Ref: PlacementGroupsetup
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
        - Key: DeploymentGroup
          Value:
            Ref: DeploymentGroup
        - Key: ENV
          Value:
            Ref: ENVTag
        - Key: Version
          Value:
            Ref: VersionTag
        - Key: Project
          Value:
            Ref: ProjectTag
